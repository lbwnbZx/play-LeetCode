
//参考：https://leetcode-cn.com/problems/copy-list-with-random-pointer/solution/liang-chong-shi-xian-tu-jie-138-fu-zhi-dai-sui-ji-/
/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if(head == null) return null;
        Node p = head;
        //在每个原结点后面创建一个新节点
        while(p != null){
            Node newNode = new Node(p.val);
            newNode.next = p.next;
            p.next = newNode;
            p = newNode.next;
        }
        p = head;
        /*
        设置新节点的随机结点，原结点i的随机指针指向原结点j，新节点i的随机指针指向原结点j的next
        */
        while(p != null){
            if(p.random != null) {//p.random == null时，p.random没有next
                p.next.random = p.random.next;
            }
            p = p.next.next;
        }
        //将两个链表分离
        Node dumy = new Node(-1);
        Node cur = dumy;
        p = head;
        while(p != null){
            cur.next = p.next;
            cur = cur.next;
            p.next = cur.next;
            p = p.next;
        }
        return dumy.next;
    }
}
