class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int row = matrix.length;
        int col = matrix.length;
        int left = matrix[0][0];
        int right = matrix[row-1][col-1];
        while(left< right){
            int mid = (left + right)/2;
            int count = findNotBiggerThanMid(matrix,mid,row,col);
             if (count < k) {
                // 第k小的数在右半部分，且不包含mid
                left = mid + 1;
            } else {
                // 第k小的数在左半部分，可能包含mid
                right = mid;
            }

        }
        return right;
    }
    public int findNotBiggerThanMid(int[][] matrix, int mid, int row, int col){
         // 以列为单位找，找到每一列最后一个<=mid的数即知道每一列有多少个数<=mid
        int i = row - 1;
        int j = 0;
        int count = 0;
        while (i >= 0 && j < col) {
            if (matrix[i][j] <= mid) {
                // 第j列有i+1个元素<=mid
                count += i + 1;
                j++;
            } else {
                // 第j列目前的数大于mid，需要继续在当前列往上找
                i--;
            }
        }
        return count;
    }
}
