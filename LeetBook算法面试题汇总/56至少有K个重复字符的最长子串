class Solution {
    public int longestSubstring(String s, int k) {
        if(s == null || s.length() == 0) return 0;
        Map<Character, Integer> map = new HashMap<>();
        for(char c : s.toCharArray()){
            map.put(c, map.getOrDefault(c, 0) + 1);
        }

        // 这里是先把 s 传进 sb 中来找出不满足 k 个的元素及其位置
        StringBuilder sb = new StringBuilder(s);
        for(int i = 0; i < s.length();i ++){
            if(map.get(s.charAt(i)) < k){
                sb.setCharAt(i, ',');
            }
        }

        //以不符合要求的元素位置进行分割存储到字符串数组中
        String [] string = sb.toString().split(",");
        // 如果仅有一组，则说明只有一个字母，返回首字母既可
        if (string.length == 1) {
            return string[0].length();
        }
        int max = 0;
        //如果有很多组，就进行最大值比较
        for (String str : string) {
            max = Math.max(max, longestSubstring(str, k));
        }
        return max;
    }
    
}
