class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums.length == 0) return 0;
        Arrays.sort(nums);
        int res = 1, cur = 1;
        for(int i = 0;i < nums.length - 1; i++ ){
            if(nums[i] == nums[i+1]) continue;
            if(nums[i]+1 == nums[i+1]){
                cur++;
            }else{
                cur = 1;
            }
            res = res > cur ? res : cur;
        }
        return res;
    }
}


// 哈希表+动态规划
class Solution {
    public int longestConsecutive(int[] nums) {
        Map<Integer , Integer> map = new HashMap<>();
        int res = 0;
        for(int i = 0; i < nums.length ; i ++){
            if(map.containsKey(nums[i])) continue;
            //找到以nums[i]-1为结尾的连续区间的长度
            int left = map.getOrDefault(nums[i]-1, 0);
            //找到以nums[i]+1为开始的连续区间的长度
            int right = map.getOrDefault(nums[i]+1,0);
            int len = left + right + 1;

            res = res > len ? res : len;
            //更新
            //nums[i]中存放什么无所谓
            map.put(nums[i], -1);
            map.put(nums[i]-left, len);
            map.put(nums[i]+right, len);

        }
        return res;
    }
}

//集合
class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums.length == 0) return 0;
        int res = 0;
        Set<Integer> set = new HashSet<>();
        for(int num : nums){
            set.add(num);
        }
        
        for(int num : nums){
            //如果set中包含num的前一个数，则num不是连续序列的开始
            if(set.contains(num-1)) continue;

            int cur = num;
            //从cur开始统计
            while(set.contains(cur)){
                cur ++;
            }

            res = res >  (cur - num) ? res : (cur - num);   
        }
        return res;
    }
}
