class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        if(numCourses == 0 ) return new int[0];
        int [] inDegrees = new int[numCourses];
        //建立入度表
        for(int[] p: prerequisites){
            inDegrees[p[0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for(int i = 0;i < numCourses ;i++){
            if(inDegrees[i] == 0) queue.offer(i);
        }

        int count = 0;//计算可以完成的课程数量
        int []res = new int[numCourses];
        //根据先修课程列表，删除入度为0的点
        while(!queue.isEmpty()){
            int temp = queue.poll();
            res[count++] = temp;
            for(int []p:prerequisites){
                if(p[1] == temp){
                    inDegrees[p[0]]--;
                    if(inDegrees[p[0]] == 0) queue.offer(p[0]);
                }
            }
        }
        if(count == numCourses) return res;
        return new int[0];
    }
}
