//暴力法
class Solution {
    public int countPrimes(int n) {
        int count = 0;
        for(int i = 2; i < n ; i++){
            if(isPrime(i))  count ++;

        }
        return count;
    }
    public boolean isPrime(int n){
        for(int i = 2 ; i * i <= n; i++ ){
            if(n % i == 0) return false;
        }
        return true;
    }
}

//高效方法
class Solution {
    public int countPrimes(int n) {
        boolean [] isPrim = new boolean[n];
        Arrays.fill(isPrim,true);

        for(int i = 2 ; i < n ; i++){
            if(isPrim[i]){
                //i的倍数不可能是质数了
                for(int j = 2 ;j*i<n;j++){
                    isPrim[j*i] = false;
                }
            }
        }

        int count = 0;
        for(int i = 2;i <n;i++){
            if(isPrim[i]) count++;
        }
        return count;
    }
}
