class Solution {
    public boolean exist(char[][] board, String word) {
        if(board.length == 0 || word.length() == 0)  return false;
        char [] c = word.toCharArray();
        for(int i = 0; i<board.length; i++){
            for(int j = 0; j < board[0].length ; j++){
                if(dfs(board, c, i, j ,0)) return true;
            }
        }
        return false;
    }

    public boolean dfs(char[][]board, char[] word, int i, int j, int k){
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length ||board[i][j] != word[k]) return false;
        if(k == word.length - 1) return true;
        board[i][j] = '\0';
        boolean res = dfs(board, word, i+1 ,j, k+1) ||dfs(board, word, i-1, j ,k+1)
                        || dfs(board, word, i, j+1, k+1)|| dfs(board, word,i, j-1, k+1);
        board[i][j] = word[k];
        return res;                
    }
}
