/*
根据边界打印，即将元素按顺序添加至列表 res 尾部；
边界向内收缩 1 （代表已被打印）；
判断是否打印完毕（边界是否相遇），若打印完毕则跳出
*/
class Solution {
    public int[] spiralOrder(int[][] matrix) {
        if (matrix.length == 0) return new int[0];
        int t = 0, b = matrix.length - 1, l = 0, r = matrix[0].length - 1;  
        int x = 0;//res的下标
        int []res = new int[(b + 1) * (r+1)];
        
        while(true){
            for(int i = l; i <= r; i++){
                res[x++] = matrix[t][i];
            }
            if(++t > b) break;

            for(int i = t; i <=b; i++){
                res[x++] = matrix[i][r];
            }
            if(--r < l) break;
            
            for(int i = r; i >= l; i--){
                res[x++] = matrix[b][i];
            }
            if(--b < t) break;

            for(int i = b; i >= t; i--){
                res[x++] = matrix[i][l];
            }
            if(++l > r) break;
        } 
        
        return res;
    }
}
